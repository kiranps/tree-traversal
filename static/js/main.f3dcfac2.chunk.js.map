{"version":3,"sources":["helper.ts","Styled.tsx","TreeChart.tsx","constants.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["preOrderTraversal","node","arr","arguments","length","undefined","n","children","push","postOrderTraversal","inOrderTraversal","breadthFirstTraversal","queue","currentNode","shift","diagonal","d","source","x","y","target","TreeBox","styled","div","withConfig","displayName","componentId","SelectionBox","Select","select","Option","option","TraversedList","Item","Button","button","SVG","svg","Path","path","Text","text","props","active","Circle","circle","Translate","g","TreeChart","_ref","data","parsed","root","d3","size","lines","links","map","circles","descendants","Object","objectSpread","findIndex","react_default","a","createElement","i","key","Fragment","cx","cy","dx","dy","value","TREE_DATA","App","_this","traversal","state","traversing","tree","handleChange","e","toggleTraversal","stopTraversal","startTraversal","clearTimeout","setState","animateTraversal","setTimeout","concat","toConsumableArray","slice","_this$state","this","react","src_TreeChart","onChange","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f3dcfac2.chunk.js","sourcesContent":["import { Node, PointLink } from \"./types\";\n\nconst LEFT = 0;\nconst RIGHT = 1;\n\nexport const preOrderTraversal = (node: Node, arr: Node[] = []): Node[] => {\n  if (node) {\n    const n = node.children || [];\n    arr.push(node);\n    preOrderTraversal(n[LEFT], arr);\n    preOrderTraversal(n[RIGHT], arr);\n  }\n  return arr;\n};\n\nexport const postOrderTraversal = (node: Node, arr: Node[] = []): Node[] => {\n  if (node) {\n    const n = node.children || [];\n    postOrderTraversal(n[LEFT], arr);\n    postOrderTraversal(n[RIGHT], arr);\n    arr.push(node);\n  }\n  return arr;\n};\n\nexport const inOrderTraversal = (node: Node, arr: Node[] = []): Node[] => {\n  if (node) {\n    const n = node.children || [];\n    inOrderTraversal(n[LEFT], arr);\n    arr.push(node);\n    inOrderTraversal(n[RIGHT], arr);\n  }\n  return arr;\n};\n\nexport const breadthFirstTraversal = (node: Node): Node[] => {\n  let queue = [node];\n  const arr: Node[] = [];\n\n  while (queue.length) {\n    let currentNode = queue.shift();\n\n    if (currentNode) {\n      const n = currentNode.children || [];\n      if (n[LEFT]) {\n        queue.push(n[LEFT]);\n      }\n      if (n[RIGHT]) {\n        queue.push(n[RIGHT]);\n      }\n      arr.push(currentNode);\n    }\n  }\n  return arr;\n};\n\nexport function diagonal(d: PointLink): string {\n  return (\n    \"M\" +\n    d.source.x +\n    \",\" +\n    d.source.y +\n    \"C\" +\n    (d.source.x + d.target.x) / 2 +\n    \",\" +\n    d.source.y +\n    \" \" +\n    (d.source.x + d.target.x) / 2 +\n    \",\" +\n    d.target.y +\n    \" \" +\n    d.target.x +\n    \",\" +\n    d.target.y\n  );\n}\n","import styled from \"styled-components/macro\";\nimport { Children } from \"react\";\n\nconst TreeBox = styled.div`\n  position: absolute;\n  left: 0;\n  top: 0;\n  bottom: 0;\n  width: 50%;\n  text-align: center;\n  padding-top: 14%;\n`;\n\nconst SelectionBox = styled.div`\n  position: absolute;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  width: 50%;\n  background-color: #eee;\n  text-align: center;\n  padding-top: 20%;\n`;\n\nconst Select = styled.select`\n  width: 200px;\n  height: 40px;\n  text-align: center;\n  background-color: #fff;\n  outline: none;\n  margin: 10px auto;\n  padding: 5px 10px;\n  border: 1px solid #d6d6d6;\n  color: #5f5f5f;\n`;\n\nconst Option = styled.option`\n  color: #5f5f5f;\n`;\n\nconst TraversedList = styled.div`\n  margin-top: 10px;\n`;\n\nconst Item = styled.div`\n  display: inline-block;\n  height: 50px;\n  width: 50px;\n  border: 1px solid #d6d6d6;\n  margin-right: 5px;\n  background-color: #fff;\n  line-height: 48px;\n  border-radius: 2px;\n  font-size: 15px;\n  color: #5f5f5f;\n`;\n\nconst Button = styled.button`\n  margin-left: 10px;\n  border: 1px solid #d6d6d6;\n  color: #5f5f5f;\n  background-color: #fff;\n  border-radius: 3px;\n  height: 40px;\n  cursor: pointer;\n  outline: none;\n  min-width: 100px;\n  user-select: none;\n`;\n\nconst Tree = styled.svg`\n  width: 200px;\n  height: 260px;\n`;\n\nconst SVG = styled.svg`\n  width: 200px;\n  height: 260px;\n`;\n\nconst Path = styled.path`\n  fill: none;\n  stroke: #555;\n  stroke-width: 1.5px;\n  stroke-opacity: 0.5;\n`;\n\ninterface Props {\n  active: boolean;\n}\n\nconst Text = styled.text<Props>`\n  font-size: 12px;\n  fill: #5f5f5f;\n  fill: ${props => (props.active ? \"#fff\" : \"#5f5f5f5\")};\n`;\n\nconst Circle = styled.circle<Props>`\n  fill: ${props => (props.active ? \"#2196F3\" : \"#fff\")};\n  stroke: ${props => (props.active ? \"#2196F3\" : \"#555\")};\n  stroke-width: 3px;\n  stroke-opacity: 0.6;\n  r: 15;\n`;\n\nconst Translate = styled.g`\n  transform: translate(-70px, 30px);\n`;\n\nexport {\n  TreeBox,\n  Tree,\n  SelectionBox,\n  Select,\n  Option,\n  TraversedList,\n  Item,\n  Button,\n  SVG,\n  Text,\n  Path,\n  Circle,\n  Translate\n};\n","import React from \"react\";\nimport * as d3 from \"d3\";\nimport { diagonal } from \"./helper\";\nimport { SVG, Text, Circle, Path, Translate } from \"./Styled\";\nimport { TreeChartProps, PointNode } from \"./types\";\n\nconst TreeChart = ({ data, parsed }: TreeChartProps) => {\n  const root = d3.tree().size([320, 200])(d3.hierarchy(data));\n  const lines = root.links().map(diagonal);\n  const circles = root.descendants().map((x: PointNode) => ({\n    ...x,\n    active: parsed.findIndex(d => d.x === x.x && d.y === x.y) >= 0\n  }));\n\n  return (\n    <SVG>\n      <Translate>\n        {lines.map((x: any, i: number) => (\n          <Path key={i} d={x} />\n        ))}\n        {circles.map((x: any, i: number) => (\n          <React.Fragment key={i}>\n            <Circle cx={x.x} cy={x.y} active={x.active} />\n            <Text dx={x.x - 7} dy={x.y + 4} active={x.active}>\n              {x.value}\n            </Text>\n          </React.Fragment>\n        ))}\n      </Translate>\n    </SVG>\n  );\n};\n\nexport default TreeChart;\n","const TREE_DATA = {\n  value: \"34\",\n  children: [\n    {\n      value: \"23\",\n      children: [\n        {\n          value: \"12\",\n          children: []\n        },\n        {\n          value: \"04\",\n          children: [\n            {\n              value: \"16\",\n              children: []\n            },\n            {\n              value: \"09\",\n              children: []\n            }\n          ]\n        }\n      ]\n    },\n    {\n      value: \"92\",\n      children: []\n    }\n  ]\n};\n\nexport { TREE_DATA };\n","import React, { Component, Fragment } from \"react\";\nimport * as d3 from \"d3\";\nimport TreeChart from \"./TreeChart\";\nimport { TREE_DATA } from \"./constants\";\nimport { Node, AppState, SelectChangeEvent } from \"./types\";\nimport {\n  TreeBox,\n  SelectionBox,\n  Select,\n  Option,\n  TraversedList,\n  Item,\n  Button\n} from \"./Styled\";\n\nimport {\n  inOrderTraversal,\n  preOrderTraversal,\n  postOrderTraversal,\n  breadthFirstTraversal\n} from \"./helper\";\n\nclass App extends Component<{}, AppState> {\n  root: Node = d3.tree().size([320, 200])(d3.hierarchy(TREE_DATA));\n  arr: Node[] = preOrderTraversal(this.root);\n  traversal?: number;\n\n  state = { traversing: false, tree: [] };\n\n  handleChange = (e: SelectChangeEvent) => {\n    let traversalType = e.target.value;\n\n    switch (traversalType) {\n      case \"preorder\":\n        this.arr = preOrderTraversal(this.root);\n        break;\n      case \"postorder\":\n        this.arr = postOrderTraversal(this.root);\n        break;\n      case \"inorder\":\n        this.arr = inOrderTraversal(this.root);\n        break;\n      case \"bft\":\n        this.arr = breadthFirstTraversal(this.root);\n        break;\n    }\n  };\n\n  toggleTraversal = () => {\n    this.state.traversing ? this.stopTraversal() : this.startTraversal();\n  };\n\n  stopTraversal = () => {\n    clearTimeout(this.traversal);\n    this.setState({ traversing: false, tree: [] });\n  };\n\n  startTraversal = () => {\n    this.setState({ traversing: true, tree: [] });\n    this.animateTraversal(this.arr);\n  };\n\n  animateTraversal = (arr: Node[]) => {\n    if (arr.length > 0) {\n      this.traversal = setTimeout(() => {\n        this.setState({ tree: [...this.state.tree, arr[0]] });\n        this.animateTraversal(arr.slice(1));\n      }, 1500);\n    }\n  };\n\n  render() {\n    const { tree, traversing } = this.state;\n    return (\n      <Fragment>\n        <TreeBox>\n          <TreeChart data={TREE_DATA} parsed={tree} />\n        </TreeBox>\n        <SelectionBox>\n          <Select onChange={this.handleChange}>\n            <Option value=\"preorder\">preorder</Option>\n            <Option value=\"postorder\">postorder</Option>\n            <Option value=\"inorder\">inorder</Option>\n            <Option value=\"bft\">bft</Option>\n          </Select>\n          <Button onClick={this.toggleTraversal}>\n            {traversing ? \"stop\" : \"start\"}\n          </Button>\n          <TraversedList>\n            {tree.map((x: Node, i) => (\n              <Item key={i}>{x.value}</Item>\n            ))}\n          </TraversedList>\n        </SelectionBox>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}